// Copyright(c) 2022 Jounayd Id Salah
//
// Refs:
// - https://www.shadertoy.com/view/lslGzl

void main() {}

#if 0


#version 450
#extension GL_GOOGLE_include_directive : require
#include "Base.glsl"
#include "Noise.glsl"
#include "Color.glsl"
layout(location = 0) uniform uvec2 resolution;
layout(location = 1) uniform float gamma = 2.2;
layout(location = 2) uniform vec2 unNoiseUVRatios = vec2(1.0f);
layout(location = 3) uniform uint unFrame;
layout(binding = 1) uniform sampler2D unNoise;
layout(binding = 0, rgba16f) uniform image2D unSceneHDR;

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

vec3 LinearToneMapping(vec3 color)
{
	float exposure = 1.;
	color = clamp(exposure * color, 0., 1.);
	color = pow(color, vec3(1. / gamma));
	return color;
}

vec3 SimpleReinhardToneMapping(vec3 color)
{
	float exposure = 1.5;
	color *= exposure/(1. + color / exposure);
	color = pow(color, vec3(1. / gamma));
	return color;
}

vec3 LumaBasedReinhardToneMapping(vec3 color)
{
	float luma = dot(color, vec3(0.2126, 0.7152, 0.0722));
	float toneMappedLuma = luma / (1. + luma);
	color *= toneMappedLuma / luma;
	color = pow(color, vec3(1. / gamma));
	return color;
}

vec3 WhitePreservingLumaBasedReinhardToneMapping(vec3 color)
{
	float white = 2.;
	float luma = dot(color, vec3(0.2126, 0.7152, 0.0722));
	float toneMappedLuma = luma * (1. + luma / (white*white)) / (1. + luma);
	color *= toneMappedLuma / luma;
	color = pow(color, vec3(1. / gamma));
	return color;
}

vec3 RomBinDaHouseToneMapping(vec3 color)
{
    color = exp( -1.0 / ( 2.72*color + 0.15 ) );
	color = pow(color, vec3(1. / gamma));
	return color;
}

vec3 FilmicToneMapping(vec3 color)
{
	color = max(vec3(0.), color - vec3(0.004));
	color = (color * (6.2 * color + .5)) / (color * (6.2 * color + 1.7) + 0.06);
	return color;
}

vec3 Uncharted2ToneMapping(vec3 color)
{
	float A = 0.15;
	float B = 0.50;
	float C = 0.10;
	float D = 0.20;
	float E = 0.02;
	float F = 0.30;
	float W = 11.2;
	float exposure = 2.;
	color *= exposure;
	color = ((color * (A * color + C * B) + D * E) / (color * (A * color + B) + D * F)) - E / F;
	float white = ((W * (A * W + C * B) + D * E) / (W * (A * W + B) + D * F)) - E / F;
	color /= white;
	color = pow(color, vec3(1. / gamma));
	return color;
}

vec3 ToneMap(vec3 color)
{
	//return LinearToneMapping(color);
	//return SimpleReinhardToneMapping(color);
	//return LumaBasedReinhardToneMapping(color);
	//return WhitePreservingLumaBasedReinhardToneMapping(color);
	//return RomBinDaHouseToneMapping(color);
	return FilmicToneMapping(color);
	//return Uncharted2ToneMapping(color);
}

void main()
{
	ivec2 ipos = ivec2(gl_GlobalInvocationID);
	if(any(greaterThanEqual(ipos, resolution)))
		return;
	vec3 color = imageLoad(unSceneHDR, ipos).rgb;

    color = ToneMap(color);

	vec2 uv = ipos / vec2(resolution - uvec2(1));

	// Banding removal + some arbitrary noise on luminance
	float noiseIntensity = mix(1.0f / 255.0f, 0.1f, Luminance(color));
	vec3 noise = texture(unNoise, uv * unNoiseUVRatios).xyz;
	AddTemporalNoise(noise, unFrame);
	color += (noise * 2.0f - 1.0f) * noiseIntensity;

	imageStore(unSceneHDR, ipos, vec4(saturate(color), 1.0f));
}

#endif