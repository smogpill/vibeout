// Copyright(c) 2022-2024 Jounayd Id Salah
// Based on Froyok's bloom: https://www.froyok.fr/blog/2021-12-ue4-custom-bloom/
#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_nonuniform_qualifier : enable

layout (push_constant) uniform push_constant_block 
{
    uvec2 _inputSize;
    uvec2 _outputSize;
} push;

const vec3 tint = vec3(1);
layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

#define GLOBAL_STORAGE_DESC_SET_IDX 0
#include "GlobalStorage.h"

#define GLOBAL_TEXTURES_DESC_SET_IDX 1
#include "GlobalTextures.h"

layout(set = 2, binding = 0) uniform sampler2D unPrevious;
layout(set = 2, binding = 1) uniform sampler2D unInput;
layout(set = 2, binding = 2, rgba16f) uniform writeonly image2D outColor;

const vec2 coords[9] =
{
    vec2(-1.0f,  1.0f), vec2(0.0f,  1.0f), vec2(1.0f,  1.0f ),
    vec2(-1.0f,  0.0f), vec2(0.0f,  0.0f), vec2(1.0f,  0.0f ),
    vec2(-1.0f, -1.0f), vec2(0.0f, -1.0f), vec2(1.0f, -1.0f )
};

const float weights[9] =
{
    0.0625f, 0.125f, 0.0625f,
    0.125f,  0.25f,  0.125f,
    0.0625f, 0.125f, 0.0625f
};

void main()
{
    ivec2 ipos = ivec2(gl_GlobalInvocationID);
	if(any(greaterThanEqual(ipos, push._outputSize)))
		return;

    vec2 uv = (ipos + 0.5f) / vec2(push._outputSize);
    vec2 pixelSize = (1.0f / vec2(push._inputSize)) * 0.5;

    // Previous color
	vec3 previousColor = vec3(0.0f);
    for (int i = 0; i < 9; ++i)
    {
        vec2 itUV = uv + coords[i] * pixelSize;
        previousColor += weights[i] * texture(unPrevious, itUV).rgb / STORAGE_SCALE_HDR;
    }
    previousColor *= tint;

    // Current color
    vec3 currentColor = texture(unInput, uv).rgb / STORAGE_SCALE_HDR;

    vec3 color = mix(currentColor, previousColor, _globalUBO._bloom2_radius);
	imageStore(outColor, ipos, vec4(color, 1) * STORAGE_SCALE_HDR);
}
