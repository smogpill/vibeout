// Copyright(c) 2022 Jounayd Id Salah
#version 450
#extension GL_GOOGLE_include_directive : require

void main() {}

#if 0

#include "Color.glsl"

layout(location = 0) uniform uvec2 size;
layout(location = 1) uniform float unDeltaTime = 0.0f;
layout(location = 2) uniform float unExposureSpeed = 5.0f;
layout(binding = 0) uniform sampler2D unLighting;
layout(binding = 1) uniform sampler2D unPreviousLuminance;
layout(binding = 0, rg16f) uniform writeonly image2D outColor;
layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

void main()
{
    ivec2 ipos = ivec2(gl_GlobalInvocationID);
	if(any(greaterThanEqual(ipos, size)))
		return;

    vec2 uv = (ipos + 0.5f) / vec2(size);
	vec3 inputColor = texture(unLighting, uv).xyz;
	float previousAverageLuminance = exp(texture(unPreviousLuminance, uv).x);
	float newLuminance = Luminance(inputColor) + 1e-6f; // small epsilon to avoid issues with log for null values
	float luminance = previousAverageLuminance + (newLuminance - previousAverageLuminance) * (1.0f - exp(-unDeltaTime * unExposureSpeed));
	imageStore(outColor, ipos, vec4(vec2(log(luminance)), 1, 1));
}

#endif